{"version":3,"sources":["components/Canvas.jsx","container/layout/Content.jsx","components/SizeControl.jsx","components/TextControl.jsx","components/ColorControl.jsx","container/layout/Side.jsx","App.js","serviceWorker.js","index.js"],"names":["Canvas","Width","Height","TextType","Text","Text1","Text2","TextSize","Color","handleDownloadURL","canvasRef","useRef","useEffect","console","log","canvas","current","context","getContext","fillStyle","fillRect","textAlign","font","fillText","width","height","toDataURL","ref","ContentWrap","styled","div","ButtonStyled","Button","Content","DownLoadURL","href","download","type","icon","DownloadOutlined","size","SizeWrap","SizeControl","setWidth","setHeight","useState","InputWidth","setInputWidth","InputHeight","setInputHeight","applySize","e","preventDefault","onSubmit","className","addonBefore","value","onChange","target","htmlType","onClick","TabPane","Tabs","TextWrap","TextControl","setTextType","setText","setText1","setText2","setTextSize","span","style","fontSize","padding","defaultActiveKey","key","tab","placeholder","SketchPickerStyled","SketchPicker","ColorControl","handleChangeComplete","handleChange","color","onChangeComplete","disableAlpha","ControlsWrap","Side","AppWrap","App","Math","floor","random","toString","setColor","setDownLoadURL","Helmet","name","content","url","hex","event","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.09649323.chunk.js","sourcesContent":["import React, { useRef, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nfunction Canvas({\r\n  Width,\r\n  Height,\r\n  TextType,\r\n  Text,\r\n  Text1,\r\n  Text2,\r\n  TextSize,\r\n  Color,\r\n  handleDownloadURL,\r\n}) {\r\n  const canvasRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    console.log(Color);\r\n    const canvas = canvasRef.current;\r\n    const context = canvas.getContext(\"2d\");\r\n\r\n    context.fillStyle = Color;\r\n    context.fillRect(0, 0, Width, Height);\r\n\r\n    context.textAlign = \"center\";\r\n    context.font = `${TextSize}px Arial`;\r\n\r\n    if (TextType) {\r\n      context.fillStyle = \"#fff\";\r\n      context.fillText(\r\n        Text,\r\n        canvas.width / 2,\r\n        canvas.height / 2 + TextSize / 2\r\n      );\r\n    } else {\r\n      context.fillStyle = \"#fff\";\r\n      context.fillText(\r\n        Text1,\r\n        canvas.width / 2,\r\n        canvas.height / 2 + TextSize / 2 - TextSize / 1.5\r\n      );\r\n      context.fillText(\r\n        Text2,\r\n        canvas.width / 2,\r\n        canvas.height / 2 + TextSize / 2 + TextSize / 1.5\r\n      );\r\n    }\r\n    console.log(canvas.toDataURL(\"image/png\"));\r\n    handleDownloadURL(canvas.toDataURL(\"image/png\"));\r\n  }, [Width, Height, TextType, Text, Text1, Text2, TextSize, Color]);\r\n\r\n  return (\r\n    <div>\r\n      <canvas ref={canvasRef} width={Width} height={Height} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Canvas;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Canvas from \"../../components/Canvas\";\r\nimport { Button } from \"antd\";\r\nimport { DownloadOutlined } from \"@ant-design/icons\";\r\n\r\nfunction Content({\r\n  Width,\r\n  Height,\r\n  TextType,\r\n  Text,\r\n  Text1,\r\n  Text2,\r\n  TextSize,\r\n  Color,\r\n  DownLoadURL,\r\n  handleDownloadURL,\r\n}) {\r\n  return (\r\n    <ContentWrap>\r\n      <Canvas\r\n        TextType={TextType}\r\n        Width={Width}\r\n        Height={Height}\r\n        Text={Text}\r\n        Text1={Text1}\r\n        Text2={Text2}\r\n        TextSize={TextSize}\r\n        Color={Color}\r\n        handleDownloadURL={handleDownloadURL}\r\n      />\r\n\r\n      <a href={DownLoadURL} download=\"sample.png\">\r\n        <ButtonStyled type=\"primary\" icon={<DownloadOutlined />} size={\"large\"}>\r\n          Download\r\n        </ButtonStyled>\r\n      </a>\r\n    </ContentWrap>\r\n  );\r\n}\r\n\r\nconst ContentWrap = styled.div`\r\n  background-color: #282c34;\r\n  overflow: scroll;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  width: 80%;\r\n  height: 100%;\r\n  border-right: 1px solid #e2e2e2;\r\n`;\r\n\r\nconst ButtonStyled = styled(Button)`\r\n  margin-top: 20px;\r\n`;\r\n\r\nexport default Content;\r\n","import React, { useState } from \"react\";\r\nimport { Button, Input } from \"antd\";\r\nimport styled from \"styled-components\";\r\n\r\nfunction SizeControl({ Width, Height, setWidth, setHeight }) {\r\n  const [InputWidth, setInputWidth] = useState(Width);\r\n  const [InputHeight, setInputHeight] = useState(Height);\r\n\r\n  const applySize = (e) => {\r\n    e.preventDefault();\r\n    setWidth(InputWidth);\r\n    setHeight(InputHeight);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <p>백그라운드 크기</p>\r\n      <form onSubmit={applySize}>\r\n        <SizeWrap>\r\n          <div className=\"size\">\r\n            <div>\r\n              <Input\r\n                type=\"text\"\r\n                addonBefore=\"가로\"\r\n                value={InputWidth}\r\n                onChange={(e) => {\r\n                  setInputWidth(e.target.value);\r\n                }}\r\n              ></Input>\r\n            </div>\r\n            <div>\r\n              <Input\r\n                type=\"text\"\r\n                addonBefore=\"세로\"\r\n                value={InputHeight}\r\n                onChange={(e) => {\r\n                  setInputHeight(e.target.value);\r\n                }}\r\n              ></Input>\r\n            </div>\r\n          </div>\r\n\r\n          <div>\r\n            <Button htmlType=\"submit\" onClick={applySize}>\r\n              적용\r\n            </Button>\r\n          </div>\r\n        </SizeWrap>\r\n      </form>\r\n\r\n      <br />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst SizeWrap = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n\r\n  .size {\r\n    margin-right: 10px;\r\n  }\r\n  button {\r\n    height: 100%;\r\n  }\r\n`;\r\n\r\nexport default SizeControl;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Tabs, Input, InputNumber, Row, Col } from \"antd\";\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nfunction TextControl({\r\n  setTextType,\r\n  Text,\r\n  Text1,\r\n  Text2,\r\n  setText,\r\n  setText1,\r\n  setText2,\r\n  TextSize,\r\n  setTextSize,\r\n}) {\r\n  function callback(key) {\r\n    if (key === \"2\") {\r\n      setTextType(false);\r\n    } else {\r\n      setTextType(true);\r\n    }\r\n    console.log(key);\r\n  }\r\n\r\n  return (\r\n    <TextWrap>\r\n      <p>폰트 사이즈</p>\r\n      <Row>\r\n        <Col span={20}>\r\n          <InputNumber\r\n            style={{ width: \"100%\" }}\r\n            value={TextSize}\r\n            onChange={setTextSize}\r\n          />\r\n        </Col>\r\n        <Col span={4} style={{ fontSize: \"20px\", padding: \"0\" }}>\r\n          px\r\n        </Col>\r\n      </Row>\r\n\r\n      <br />\r\n\r\n      <Tabs defaultActiveKey=\"1\" onChange={callback}>\r\n        <TabPane tab=\"한 줄 텍스트\" key=\"1\">\r\n          <Row>\r\n            <Input\r\n              placeholder=\"한 줄 텍스트\"\r\n              onChange={(e) => setText(e.target.value)}\r\n              value={Text}\r\n            />\r\n          </Row>\r\n        </TabPane>\r\n        <TabPane tab=\"두 줄 텍스트\" key=\"2\">\r\n          <Input\r\n            placeholder=\"첫번째 줄 텍스트\"\r\n            onChange={(e) => setText1(e.target.value)}\r\n            value={Text1}\r\n          />\r\n          <Input\r\n            placeholder=\"두번째 줄 텍스트\"\r\n            onChange={(e) => setText2(e.target.value)}\r\n            value={Text2}\r\n          />\r\n        </TabPane>\r\n      </Tabs>\r\n    </TextWrap>\r\n  );\r\n}\r\n\r\nconst TextWrap = styled.div`\r\n  padding-bottom: 20px;\r\n`;\r\n\r\nexport default TextControl;\r\n","import React from \"react\";\r\nimport { SketchPicker } from \"react-color\";\r\nimport styled from \"styled-components\";\r\n\r\nfunction ColorControl({ Color, handleChangeComplete, handleChange }) {\r\n  return (\r\n    <div>\r\n      <p>백그라운드</p>\r\n      <SketchPickerStyled\r\n        color={Color}\r\n        onChangeComplete={handleChangeComplete}\r\n        onChange={handleChange}\r\n        disableAlpha={true}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst SketchPickerStyled = styled(SketchPicker)`\r\n  margin: auto;\r\n`;\r\n\r\nexport default ColorControl;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport SizeControl from \"../../components/SizeControl\";\r\nimport TextControl from \"../../components/TextControl\";\r\nimport ColorControl from \"../../components/ColorControl\";\r\n\r\nfunction Side({\r\n  Width,\r\n  Height,\r\n  setTextType,\r\n  Text,\r\n  Text1,\r\n  Text2,\r\n  setText,\r\n  setText1,\r\n  setText2,\r\n  setWidth,\r\n  setHeight,\r\n  TextSize,\r\n  setTextSize,\r\n  Color,\r\n  handleChangeComplete,\r\n  handleChange,\r\n}) {\r\n  return (\r\n    <ControlsWrap>\r\n      <SizeControl\r\n        Width={Width}\r\n        Height={Height}\r\n        setWidth={setWidth}\r\n        setHeight={setHeight}\r\n      />\r\n      <TextControl\r\n        setTextType={setTextType}\r\n        Text={Text}\r\n        Text1={Text1}\r\n        Text2={Text2}\r\n        setText={setText}\r\n        setText1={setText1}\r\n        setText2={setText2}\r\n        TextSize={TextSize}\r\n        setTextSize={setTextSize}\r\n      />\r\n      <ColorControl\r\n        Color={Color}\r\n        handleChangeComplete={handleChangeComplete}\r\n        handleChange={handleChange}\r\n      />\r\n    </ControlsWrap>\r\n  );\r\n}\r\n\r\nconst ControlsWrap = styled.div`\r\n  width: 20%;\r\n  height: 100%;\r\n  padding: 40px;\r\n`;\r\n\r\nexport default Side;\r\n","import React, { useState, useEffect } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport Content from \"./container/layout/Content\";\nimport Side from \"./container/layout/Side\";\nimport styled from \"styled-components\";\n\nimport \"./App.css\";\nimport \"antd/dist/antd.css\";\n\nfunction App() {\n  const [Width, setWidth] = useState(500);\n  const [Height, setHeight] = useState(500);\n\n  const [TextType, setTextType] = useState(true);\n  const [Text, setText] = useState(\"텍스트를 입력하세요\");\n  const [Text1, setText1] = useState(\"텍스트를\");\n  const [Text2, setText2] = useState(\"입력하세요\");\n  const [TextSize, setTextSize] = useState(\"50\");\n\n  const [Color, setColor] = useState(\n    \"#\" + Math.floor(Math.random() * 16777215).toString(16)\n  );\n\n  const [DownLoadURL, setDownLoadURL] = useState(\"\");\n\n  useEffect(() => {\n    console.log(TextType);\n  }, [TextType]);\n\n  const handleChangeComplete = (color) => {\n    setColor(color.hex);\n  };\n\n  const handleChange = (color, event) => {\n    setColor(color.hex);\n  };\n\n  const handleDownloadURL = (url) => {\n    setDownLoadURL(url);\n  };\n\n  return (\n    <AppWrap className=\"App\">\n      <Helmet>\n        <title>썸네일 크리에이터</title>\n        <meta name=\"description\" content=\"썸네일, 배너 생성기입니다.\" />\n        <meta\n          name=\"keywords\"\n          content=\"썸네일, 배너, 생성기, 크리에이터, 만들기, 사이트, devmole\"\n        />\n      </Helmet>\n\n      <Content\n        Width={Width}\n        Height={Height}\n        TextType={TextType}\n        Text={Text}\n        Text1={Text1}\n        Text2={Text2}\n        TextSize={TextSize}\n        Color={Color}\n        DownLoadURL={DownLoadURL}\n        handleDownloadURL={handleDownloadURL}\n      />\n\n      <Side\n        Width={Width}\n        Height={Height}\n        setTextType={setTextType}\n        setWidth={setWidth}\n        setHeight={setHeight}\n        Text={Text}\n        Text1={Text1}\n        Text2={Text2}\n        setText={setText}\n        setText1={setText1}\n        setText2={setText2}\n        TextSize={TextSize}\n        setTextSize={setTextSize}\n        Color={Color}\n        handleChangeComplete={handleChangeComplete}\n        handleChange={handleChange}\n      />\n    </AppWrap>\n  );\n}\n\nconst AppWrap = styled.div`\n  display: flex;\n  height: 100%;\n`;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}