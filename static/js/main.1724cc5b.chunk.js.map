{"version":3,"sources":["context/SizeProvider.jsx","context/type.js","context/TextProvider.jsx","context/CanvasProvider.jsx","components/Canvas.jsx","container/Content.jsx","components/SizeControl.jsx","components/TextControl.jsx","components/ColorControl.jsx","container/Side.jsx","App.js","serviceWorker.js","index.js"],"names":["SizeContext","React","createContext","initialState","width","height","reducer","state","action","type","Error","SizeProvider","children","useReducer","sizeDispatch","Provider","value","TextContext","TextType","Text","Text1","Text2","TextSize","TextProvider","textDispatch","CanvasContext","BackgroundColor","Math","floor","random","toString","DownLoadURL","CanvasProvider","canvasDispatch","Canvas","useContext","canvasRef","useRef","useEffect","canvas","current","context","getContext","fillStyle","fillRect","textAlign","font","fillText","toDataURL","ref","ContentWrap","styled","div","ButtonStyled","Button","Content","href","download","icon","DownloadOutlined","size","SizeWrap","SizeControl","addonBefore","onChange","e","target","TabPane","Tabs","TextWrap","TextControl","textHandler","span","style","fontSize","padding","defaultActiveKey","key","tab","placeholder","SketchPickerStyled","SketchPicker","ColorControl","color","hex","disableAlpha","ControlsWrap","Side","AppWrap","App","className","Helmet","name","content","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1724cc5b.chunk.js","sourcesContent":["import React, { useReducer } from \"react\";\r\nimport { SET_WIDTH, SET_HEIGHT } from \"./type\";\r\n\r\nexport const SizeContext = React.createContext();\r\n\r\nconst initialState = {\r\n  width: 500,\r\n  height: 500,\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case SET_WIDTH:\r\n      return { ...state, width: action.width };\r\n    case SET_HEIGHT:\r\n      return { ...state, height: action.height };\r\n\r\n    default:\r\n      throw new Error();\r\n  }\r\n};\r\n\r\nconst SizeProvider = ({ children }) => {\r\n  const [state, sizeDispatch] = useReducer(reducer, initialState);\r\n\r\n  return (\r\n    <SizeContext.Provider\r\n      value={{\r\n        width: state.width,\r\n        height: state.height,\r\n        sizeDispatch,\r\n      }}\r\n    >\r\n      {children}\r\n    </SizeContext.Provider>\r\n  );\r\n};\r\n\r\nexport default SizeProvider;\r\n","// size type\r\nexport const SET_WIDTH = \"SET_WIDTH\";\r\nexport const SET_HEIGHT = \"SET_HEIGHT\";\r\n\r\n// text type\r\nexport const SET_TEXT_TYPE = \"SET_TEXT_TYPE\";\r\nexport const SET_ONELINE_TEXT = \"SET_ONELINE_TEXT\";\r\nexport const SET_TWOLINE_TEXT1 = \"SET_TWOLINE_TEXT1\";\r\nexport const SET_TWOLINE_TEXT2 = \"SET_TWOLINE_TEXT2\";\r\nexport const SET_TEXT_SIZE = \"SET_TEXT_SIZE\";\r\n\r\n// canvas type\r\nexport const SET_DOWNLOAD_URL = \"SET_DOWNLOAD_URL\";\r\nexport const SET_BACKGROUND_COLOR = \"SET_BACKGROUND_COLOR\";\r\n","import React, { useReducer } from \"react\";\r\nimport {\r\n  SET_TEXT_TYPE,\r\n  SET_ONELINE_TEXT,\r\n  SET_TWOLINE_TEXT1,\r\n  SET_TWOLINE_TEXT2,\r\n  SET_TEXT_SIZE,\r\n} from \"./type\";\r\n\r\nexport const TextContext = React.createContext();\r\n\r\nconst initialState = {\r\n  TextType: \"one-line\",\r\n  Text: \"텍스트를 입력하세요\",\r\n  Text1: \"텍스트를\",\r\n  Text2: \"입력하세요\",\r\n  TextSize: \"50\",\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case SET_TEXT_TYPE:\r\n      return { ...state, TextType: action.TextType };\r\n    case SET_ONELINE_TEXT:\r\n      return { ...state, Text: action.Text };\r\n    case SET_TWOLINE_TEXT1:\r\n      return { ...state, Text1: action.Text };\r\n    case SET_TWOLINE_TEXT2:\r\n      return { ...state, Text2: action.Text };\r\n    case SET_TEXT_SIZE:\r\n      return { ...state, TextSize: action.TextSize };\r\n\r\n    default:\r\n      throw new Error();\r\n  }\r\n};\r\n\r\nconst TextProvider = ({ children }) => {\r\n  const [state, textDispatch] = useReducer(reducer, initialState);\r\n  return (\r\n    <TextContext.Provider\r\n      value={{\r\n        TextType: state.TextType,\r\n        Text: state.Text,\r\n        Text1: state.Text1,\r\n        Text2: state.Text2,\r\n        TextSize: state.TextSize,\r\n        textDispatch,\r\n      }}\r\n    >\r\n      {children}\r\n    </TextContext.Provider>\r\n  );\r\n};\r\n\r\nexport default TextProvider;\r\n","import React, { useReducer } from \"react\";\r\nimport { SET_DOWNLOAD_URL, SET_BACKGROUND_COLOR } from \"./type\";\r\n\r\nexport const CanvasContext = React.createContext();\r\n\r\nconst initialState = {\r\n  BackgroundColor: \"#\" + Math.floor(Math.random() * 16777215).toString(16),\r\n  DownLoadURL: \"\",\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case SET_DOWNLOAD_URL:\r\n      return {\r\n        ...state,\r\n        DownLoadURL: action.DownLoadURL,\r\n      };\r\n    case SET_BACKGROUND_COLOR:\r\n      return {\r\n        ...state,\r\n        BackgroundColor: action.BackgroundColor,\r\n      };\r\n    default:\r\n      throw new Error();\r\n  }\r\n};\r\n\r\nconst CanvasProvider = ({ children }) => {\r\n  const [state, canvasDispatch] = useReducer(reducer, initialState);\r\n  return (\r\n    <CanvasContext.Provider\r\n      value={{\r\n        BackgroundColor: state.BackgroundColor,\r\n        DownLoadURL: state.DownLoadURL,\r\n        canvasDispatch,\r\n      }}\r\n    >\r\n      {children}\r\n    </CanvasContext.Provider>\r\n  );\r\n};\r\n\r\nexport default CanvasProvider;\r\n","import React, { useRef, useEffect, useContext } from \"react\";\r\nimport { SizeContext } from \"../context/SizeProvider\";\r\nimport { TextContext } from \"../context/TextProvider\";\r\nimport { CanvasContext } from \"../context/CanvasProvider\";\r\nimport { SET_DOWNLOAD_URL } from \"../context/type\";\r\n\r\nconst Canvas = () => {\r\n  const { width, height } = useContext(SizeContext);\r\n  const { TextType, Text, Text1, Text2, TextSize } = useContext(TextContext);\r\n  const { BackgroundColor, canvasDispatch } = useContext(CanvasContext);\r\n\r\n  const canvasRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const context = canvas.getContext(\"2d\");\r\n\r\n    context.fillStyle = BackgroundColor;\r\n    context.fillRect(0, 0, width, height);\r\n\r\n    context.textAlign = \"center\";\r\n    context.font = `${TextSize}px Arial`;\r\n\r\n    if (TextType === \"one-line\") {\r\n      context.fillStyle = \"#fff\";\r\n      context.fillText(\r\n        Text,\r\n        canvas.width / 2,\r\n        canvas.height / 2 + TextSize / 2\r\n      );\r\n    } else {\r\n      context.fillStyle = \"#fff\";\r\n      context.fillText(\r\n        Text1,\r\n        canvas.width / 2,\r\n        canvas.height / 2 + TextSize / 2 - TextSize / 1.5\r\n      );\r\n      context.fillText(\r\n        Text2,\r\n        canvas.width / 2,\r\n        canvas.height / 2 + TextSize / 2 + TextSize / 1.5\r\n      );\r\n    }\r\n\r\n    canvasDispatch({\r\n      type: SET_DOWNLOAD_URL,\r\n      DownLoadURL: canvas.toDataURL(\"image/png\"),\r\n    });\r\n  }, [\r\n    width,\r\n    height,\r\n    TextType,\r\n    Text,\r\n    Text1,\r\n    Text2,\r\n    TextSize,\r\n    BackgroundColor,\r\n    canvasDispatch,\r\n  ]);\r\n\r\n  return (\r\n    <div>\r\n      <canvas ref={canvasRef} width={width} height={height} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Canvas;\r\n","import React, { useContext } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Canvas from \"../components/Canvas\";\r\nimport { Button } from \"antd\";\r\nimport { DownloadOutlined } from \"@ant-design/icons\";\r\nimport { CanvasContext } from \"../context/CanvasProvider\";\r\n\r\nconst Content = () => {\r\n  const { DownLoadURL } = useContext(CanvasContext);\r\n\r\n  return (\r\n    <ContentWrap>\r\n      <Canvas />\r\n\r\n      <a href={DownLoadURL} download=\"sample.png\">\r\n        <ButtonStyled type=\"primary\" icon={<DownloadOutlined />} size={\"large\"}>\r\n          Download\r\n        </ButtonStyled>\r\n      </a>\r\n    </ContentWrap>\r\n  );\r\n};\r\n\r\nconst ContentWrap = styled.div`\r\n  background-color: #282c34;\r\n  overflow: scroll;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  width: 80%;\r\n  height: 100%;\r\n  border-right: 1px solid #e2e2e2;\r\n`;\r\n\r\nconst ButtonStyled = styled(Button)`\r\n  margin-top: 20px;\r\n`;\r\n\r\nexport default Content;\r\n","import React, { useContext } from \"react\";\r\nimport { SizeContext } from \"../context/SizeProvider\";\r\nimport { SET_WIDTH, SET_HEIGHT } from \"../context/type\";\r\n\r\nimport { Input } from \"antd\";\r\nimport styled from \"styled-components\";\r\n\r\nconst SizeControl = () => {\r\n  const { width, height, sizeDispatch } = useContext(SizeContext);\r\n\r\n  return (\r\n    <div>\r\n      <p>백그라운드 크기</p>\r\n      <SizeWrap>\r\n        <Input\r\n          type=\"text\"\r\n          addonBefore=\"가로\"\r\n          value={width}\r\n          onChange={(e) => {\r\n            sizeDispatch({ type: SET_WIDTH, width: e.target.value });\r\n          }}\r\n        ></Input>\r\n        <Input\r\n          type=\"text\"\r\n          addonBefore=\"세로\"\r\n          value={height}\r\n          onChange={(e) => {\r\n            sizeDispatch({ type: SET_HEIGHT, height: e.target.value });\r\n          }}\r\n        ></Input>\r\n      </SizeWrap>\r\n\r\n      <br />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst SizeWrap = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n\r\n  .ant-input-group-wrapper:first-child {\r\n    margin-right: 10px;\r\n  }\r\n`;\r\n\r\nexport default SizeControl;\r\n","import React, { useContext } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Tabs, Input, InputNumber, Row, Col } from \"antd\";\r\nimport { TextContext } from \"../context/TextProvider\";\r\nimport {\r\n  SET_TEXT_TYPE,\r\n  SET_ONELINE_TEXT,\r\n  SET_TWOLINE_TEXT1,\r\n  SET_TWOLINE_TEXT2,\r\n  SET_TEXT_SIZE,\r\n} from \"../context/type\";\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nconst TextControl = () => {\r\n  const { Text, Text1, Text2, TextSize, textDispatch } = useContext(\r\n    TextContext\r\n  );\r\n\r\n  const tabHandler = (key) => {\r\n    if (key === \"2\") {\r\n      textDispatch({ type: SET_TEXT_TYPE, TextType: \"two-line\" });\r\n    } else {\r\n      textDispatch({ type: SET_TEXT_TYPE, TextType: \"one-line\" });\r\n    }\r\n  };\r\n\r\n  const textHandler = (type) => (e) => {\r\n    textDispatch({ type: type, Text: e.target.value });\r\n  };\r\n\r\n  return (\r\n    <TextWrap>\r\n      <p>폰트 사이즈</p>\r\n      <Row>\r\n        <Col span={20}>\r\n          <InputNumber\r\n            style={{ width: \"100%\" }}\r\n            value={TextSize}\r\n            onChange={(value) => {\r\n              textDispatch({ type: SET_TEXT_SIZE, TextSize: value });\r\n            }}\r\n          />\r\n        </Col>\r\n        <Col span={4} style={{ fontSize: \"20px\", padding: \"0\" }}>\r\n          px\r\n        </Col>\r\n      </Row>\r\n\r\n      <br />\r\n\r\n      <Tabs defaultActiveKey=\"1\" onChange={tabHandler}>\r\n        <TabPane tab=\"한 줄 텍스트\" key=\"1\">\r\n          <Row>\r\n            <Input\r\n              placeholder=\"한 줄 텍스트\"\r\n              onChange={textHandler(SET_ONELINE_TEXT)}\r\n              value={Text}\r\n            />\r\n          </Row>\r\n        </TabPane>\r\n        <TabPane tab=\"두 줄 텍스트\" key=\"2\">\r\n          <Input\r\n            placeholder=\"첫번째 줄 텍스트\"\r\n            onChange={textHandler(SET_TWOLINE_TEXT1)}\r\n            value={Text1}\r\n          />\r\n          <Input\r\n            placeholder=\"두번째 줄 텍스트\"\r\n            onChange={textHandler(SET_TWOLINE_TEXT2)}\r\n            value={Text2}\r\n          />\r\n        </TabPane>\r\n      </Tabs>\r\n    </TextWrap>\r\n  );\r\n};\r\n\r\nconst TextWrap = styled.div`\r\n  padding-bottom: 20px;\r\n`;\r\n\r\nexport default TextControl;\r\n","import React, { useContext } from \"react\";\r\nimport { SketchPicker } from \"react-color\";\r\nimport styled from \"styled-components\";\r\nimport { CanvasContext } from \"../context/CanvasProvider\";\r\nimport { SET_BACKGROUND_COLOR } from \"../context/type\";\r\n\r\nconst ColorControl = () => {\r\n  const { BackgroundColor, canvasDispatch } = useContext(CanvasContext);\r\n\r\n  return (\r\n    <div>\r\n      <p>백그라운드</p>\r\n      <SketchPickerStyled\r\n        color={BackgroundColor}\r\n        onChange={(color) =>\r\n          canvasDispatch({\r\n            type: SET_BACKGROUND_COLOR,\r\n            BackgroundColor: color.hex,\r\n          })\r\n        }\r\n        disableAlpha={true}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst SketchPickerStyled = styled(SketchPicker)`\r\n  margin: auto;\r\n`;\r\n\r\nexport default ColorControl;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport SizeControl from \"../components/SizeControl\";\r\nimport TextControl from \"../components/TextControl\";\r\nimport ColorControl from \"../components/ColorControl\";\r\n\r\nconst Side = () => {\r\n  return (\r\n    <ControlsWrap>\r\n      <SizeControl />\r\n      <TextControl />\r\n      <ColorControl />\r\n    </ControlsWrap>\r\n  );\r\n};\r\n\r\nconst ControlsWrap = styled.div`\r\n  width: 20%;\r\n  height: 100%;\r\n  padding: 40px;\r\n`;\r\n\r\nexport default Side;\r\n","import React from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport Content from \"./container/Content\";\r\nimport Side from \"./container/Side\";\r\nimport styled from \"styled-components\";\r\n\r\nimport \"./App.css\";\r\nimport \"antd/dist/antd.css\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <AppWrap className=\"App\">\r\n      <Helmet>\r\n        <title>썸네일 크리에이터</title>\r\n        <meta name=\"description\" content=\"썸네일, 배너 생성기입니다.\" />\r\n        <meta\r\n          name=\"keywords\"\r\n          content=\"썸네일, 배너, 생성기, 크리에이터, 만들기, 사이트, devmole\"\r\n        />\r\n      </Helmet>\r\n\r\n      <Content />\r\n      <Side />\r\n    </AppWrap>\r\n  );\r\n};\r\n\r\nconst AppWrap = styled.div`\r\n  display: flex;\r\n  height: 100%;\r\n`;\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nimport SizeProvider from \"./context/SizeProvider\";\r\nimport TextProvider from \"./context/TextProvider\";\r\nimport CanvasProvider from \"./context/CanvasProvider\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <SizeProvider>\r\n      <TextProvider>\r\n        <CanvasProvider>\r\n          <App />\r\n        </CanvasProvider>\r\n      </TextProvider>\r\n    </SizeProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}